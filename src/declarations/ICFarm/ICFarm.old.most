// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Crop =
  {
    phases : [CropPhase];
    productImage : Text;
    productName : Text;
    productPrice : Nat;
    productRange : (Nat, Nat);
    seedImage : Text;
    seedName : Text;
    seedPrice : Nat;
    seedRange : (Nat, Nat)
  };
type CropPhase = {image : Text; name : Text; period : Nat};
type Crop__1 = Crop;
type Hash = Nat32;
type Inventory = {crops : Map<Nat, (Nat, Nat)>; tokens : Nat};
type Inventory__1 = Inventory;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Map<K, V> = Trie<K, V>;
type Player = {avatar : Text; name : Text; plotIds : [Nat]};
type Player__1 = Player;
type Plot = {cropId : ?Nat; timestamp : Time};
type Plot__1 = Plot;
type Time = Int;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var cropPrices :
    {
      #branch : Branch<Nat, (Nat, Nat)>;
      #empty;
      #leaf : Leaf<Nat, (Nat, Nat)>
    };
  stable var crops :
    {#branch : Branch<Nat, Crop__1>; #empty; #leaf : Leaf<Nat, Crop__1>};
  stable var gameMasters :
    {#branch : Branch<Principal, ()>; #empty; #leaf : Leaf<Principal, ()>};
  stable var inventories :
    {
      #branch : Branch<Principal, Inventory__1>;
      #empty;
      #leaf : Leaf<Principal, Inventory__1>
    };
  stable var owner : Principal;
  stable var players :
    {
      #branch : Branch<Principal, Player__1>;
      #empty;
      #leaf : Leaf<Principal, Player__1>
    };
  stable var plotOwners :
    {#branch : Branch<Nat, Principal>; #empty; #leaf : Leaf<Nat, Principal>};
  stable var plots :
    {#branch : Branch<Nat, Plot__1>; #empty; #leaf : Leaf<Nat, Plot__1>}
};
